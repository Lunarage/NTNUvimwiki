= Quicksort =

== Description of quicksort ==

{{{ class="language-python"
def quicksort(A, p, r):
  if p < r:
    # Partition the subarray around the pivot, which ends up in A[q]
    q = partition(A, p, r)
    quicksort(A, p, q - 1) # recursively sort the low side
    quicksort(A, q + 1, r) # recursively sort the high side
}}}

{{{ class="language-python"
def partition(A, p, r):
  x = A[r]                    # the pivot
  i = p - 1                   # highest index into the low side
  for j in range(p, r):       # process each element other than the pivot
    if A[j] <= x:             # does this element belong on the low side?
      i = i + 1               # index of a new slot in the low side
      A[i], A[j] = A[j], A[i] # put this element here
  A[i+1], A[r] = A[r], A[i+1] # pivot goes just to the right side of the low side
  return i + 1                # new index of the pivot
}}}

== Performance of quicksort ==

*Worst-case partitioning*: $\Theta(n^2)$

*Best-case partitioning*: $\Theta(n\log n)$

*Balanced partitioning*: $O(n\log n)$

== Randomized ==

{{{ class="language-python"
def randomized_quicksort(A, p, r):
  if p < r:
    q = randomized_partition(A, p, r)
    randomized_quicksort(A, p, q - 1)
    randomized_quicksort(A, q + 1, r)
}}}

{{{ class="language-python"
def randomized_partition(A, p, r):
  i = randint(p,r)
  A[r], A[i] = A[i], A[r]
  return partition(A, p, r)
}}}
