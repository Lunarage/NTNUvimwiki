= Quicksort =

{{{ class="language-python"
def quicksort(A, p, r):
  if p < r:
    # Partition the subarray around the pivot, which ends up in A[q]
    q = Partition(A, p, r)
    Quicksort(A, p, q - 1) # recursively sort the low side
    Quicksort(A, q + 1, r) # recursively sort the high side
}}}

{{{ class="language-python"
def partition(A, p, r):
  x = A[r]                    # the pivot
  i = p - 1                   # highest index into the low side
  for j in range(p, r):       # process each element other than the pivot
    if A[j] <= x:             # does this element belong on the low side?
      i = i + 1               # index of a new slot in the low side
      exchange A[i] with A[j] # put this element here
  exchange A[i + 1] with A[r] # pivot goes just to the right side of the low side
  return i + 1                # new index of the pivot
}}}
