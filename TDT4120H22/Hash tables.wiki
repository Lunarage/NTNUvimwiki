= Hash Tables =

When the number of keys actually stored is small relative to the total number of possible keys,
hash tables become an effective alternative to directly addressing an array,
since a hash table typically uses an array of size proportional to the number of keys actually stored.

== Direct-address tables ==

== Hash tables ==

*Hash function*

*Hash table*

*Hashes*

*Hash value*

*Collision*

=== Independent uniform hashing ===

=== Collision resolution by chaining ===

Each nonempty slot points to a linked list,
and all the elements that hash to the same slot go into that slot's linked list.

=== Analysis of hashing with chaining ===

Given a hash table _T_ with _m_ slots that stores _n_ elements,
we define the *load factor* $\alpha$ for _T_ as _n/m_,
that is, the average number of elements stored in a chain.

== Hash functions ==

A good hash function satisfies (approximately) the assumption of independent uniform hashing:
each key is equally likely to hash to any of the m slots,
independently of where any other keys have hashed to.

What does "equally likely" mean here?

If the hash function is fixed,
any probabilities would have to be based on the probability distribution of the input keys.

=== Static hashing ===

$h(k)$ is the hash function, 
$k$ is the key, 
$m$ is the number of slots, 
$A$ is a constant

==== The division method ====

{{$
h(k) = k\ \bmod\ m
}}$

==== The multiplication method ====

{{$
h(k) = \lfloor m\ (kA\ \bmod\ 1)\rfloor
}}$
